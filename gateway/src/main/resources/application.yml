server:
  port: 8080

spring:
  application:
    name: gateway
  security:
    oauth2:
      resourceserver:
        jwt:
          # For demo, validate via shared secret; replace with JWK uri in prod
          secret: c2VjdXJlLXN1cGVyLXNlY3JldC1kZW1vLXNob3VsZC1iZS0zMi1ieXRlcy1vci1sb25nZXI=

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      probes:
        enabled: true

security:
  jwt:
    hmac:
      secret: c2VjdXJlLXN1cGVyLXNlY3JldC1kZW1vLXNob3VsZC1iZS0zMi1ieXRlcy1vci1sb25nZXI=
  signing:
    enabled: false
    sharedSecret: change-me-request-signing

spring:
  cloud:
    gateway:
      default-filters:
        - name: RequestRateLimiter
          args:
            rate-limiter: '#{redisRateLimiter}'
            key-resolver: '#{@remoteAddressResolver}'
      routes:
        - id: auth
          uri: http://auth-service:8081
          predicates:
            - Path=/auth/**
          filters:
            - name: RequestRateLimiter
              args:
                rate-limiter: '#{redisRateLimiter}'
                key-resolver: '#{@remoteAddressResolver}'
                redis-rate-limiter.replenishRate: 20
                redis-rate-limiter.burstCapacity: 40
        - id: transactions
          uri: http://transaction-service:8082
          predicates:
            - Path=/api/tx/**
          filters:
            - name: RequestRateLimiter
              args:
                rate-limiter: '#{redisRateLimiter}'
                key-resolver: '#{@remoteAddressResolver}'
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20


